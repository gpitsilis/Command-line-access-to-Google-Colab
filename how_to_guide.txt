
Co-lab [1] is a new service by Google which provides access to Google's GPU computing power to anyone who has a google 
user account. Such service is quite useful for tasks like Neural Network training, where nvidia GPUs has become the 
industry standard.

The traditional way (or the one suggested by google) to access these resources is via the use of python notebook 
interfaces [2]. Notebook contents can have the form of: text, code, output, or comments.

Pyhton is the standard suppored language for coding within Google colab, which can also be mixed with unix shell commands.
The code runs in OS virtualization environments known as: containers [3]. They become very popular as they provide the isolation, 
and the security of a sandbox environemnt which makes it suitable for executing not-trusted code in compouting environments.
Working within containers though, in comparison to using real computers, has the major drawback of the state
of the environment not been preserved (e.g. processes, disk contents) after the container has been terminated.

To run this tutorial you need to have access to the following:
1. Google Colab account
2. Account on ngrok service.
3. Unix shell in your local machine.

Create a new notebook in google-colab and run the following snippents of code:

Step 1. Install ssh service in your google container.
Type-in a notebook:

> !apt update
> !apt install openssh-server

Step 2. Setup the ssh configuration service file sshd_config

2.a Activate "no-password" authentication for ssh service

> !echo "PasswordAuthentication no" >> /etc/ssh/sshd_config

2.b For being able to run x11 applications in the shell

> !echo "X11UseLocalhost no" >> /etc/ssh/sshd_config

2.c Start the ssh service

>! cat /etc/ssh/sshd_config
>! service ssh start
>! service  --status-all

Step 3. Provide ssh command line access to the container.

3.a Create a pair (public/private) keys [4] in your local machine and upload to the container side

Use ssh-keygen to create a pair of keys (public and private). ssh-keygen creates two files id_rsa and id_rsa.pub. 

3.a.1 Copy the first one (private key) to ./ssh directory in your local machine.
3.a.2 Upload the second one (private key) to the container side by typing the following in a notebook:

> %cd /root/
> %mkdir .ssh
> %cd .ssh
> %rm authorized_keys
> !echo "#### contents of id_rsa.pub ####" > authorized_keys
> !cat authorized_keys

Step 4. Install ngrok and start-up the service.

> !rm ngrok
> !wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
> !unzip ngrok-stable-linux-amd64.zip
> !./ngrok authtoken #### your personal token for authentication here ####
> !rm ngrok-stable-linux-amd64.zip
> !pwd
> !./ngrok tcp 22 &

Step 5. 

Once the ngrok service is up and running, check your status page at ngrok at: https://dashboard.ngrok.com/status/tunnels to 
find out which port and address has been assigned to the tunneling service. Use that infomation to connect to your container via an ssh client.

Example: For connection point expressed by URL: tcp://0.tcp.ngrok.io:12061 you should type-in in the command line:
> ssh root@0.tcp.ngrok.io -p 12061 -X

The last parameter (-X) while not obligatory, it is nessesary if you wish to run X windows applications in the container.

If everything has been done properly then you should greathed by a shell prompt like the following:
# root@9774ykhkfh >

Voila!

References:
[1] Colab service, https://research.google.com/colaboratory/faq.html
[2] Notebooks, https://en.wikipedia.org/wiki/Notebook_int
[3] Containers and virtualization: https://en.wikipedia.org/wiki/OS-level_virtualization
[4] Key-based authentication in ssh: https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server

